syntax = "proto3";

package bolg;

option go_package = "github.com/bolg-developers/x/projects/bolg/server/pb;pb";
option java_multiple_files = true;
option java_outer_classname = "BolgProto";
option java_package = "org.bolg_developers.bolg";

service BolgService {
  // ConnectはRoom Messagingを行うためのRPCです。
  rpc Connect(stream RoomMessage) returns (stream RoomMessage) {}
  // CheckHealth はサーバーが生存しているかチェックするためのRPCです。
  rpc CheckHealth(CheckHealthRequest) returns (CheckHealthResponse) {}
  rpc GetStamina(GetStaminaRequest) returns (Stamina) {}
  //  UseStamina はスタミナを消費するためのRPCです。
  rpc UseStamina(UseStaminaRequest) returns (UseStaminaResponse) {}
  // RecoverStamina はスタミナを強制回復するためのRPCです。
  // デバッグ用のRPCあることに注意してください！！！！！！！！！！！！！
  rpc RecoverStamina(RecoverStaminaRequest) returns (RecoverStaminaResponse) {}
}

message RoomMessage {
  oneof data {
    CreateAndJoinRoomRequest create_and_join_room_req = 1;
    CreateAndJoinRoomResponse create_and_join_room_resp = 2;
    JoinRoomRequest join_room_req = 3;
    JoinRoomResponse join_room_resp = 4;
    JoinRoomMessage join_room_msg = 5;
    NotifyReceivingRequest notify_receiving_req = 6;
    NotifyReceivingMessage notify_receiving_msg = 7;
    SurvivalResultMessage survival_result_msg = 8;
    StartGameRequest start_game_req = 9;
    StartGameMessage start_game_msg = 10;
    UpdateWeaponRequest update_weapon_req = 11;
    UpdateWeaponResponse update_weapon_resp = 12;
    ReadyRequest ready_req = 13;
    ReadyMessage ready_msg = 14;
    Error error = 15;
    RecoverHPRequest recover_hp_req = 16;
    RecoverHPResponse recover_hp_res = 17;
  }
}

message CreateAndJoinRoomRequest {
  // 注意！: このフィールドは認証処理が実装され次第消えます。
  string player_name = 1;
}

message CreateAndJoinRoomResponse {
  Room room = 1;

  // tokenはクライアントがどのルームの誰なのかを表します。
  string token = 2;
}

message JoinRoomRequest {
  int64 room_id = 1;

  // 注意！: このフィールドは認証処理が実装され次第消えます。
  string player_name = 2;
}

message JoinRoomResponse {
  Room room = 1;

  // tokenはクライアントがどのルームの誰なのかを表します。
  string token = 2;
}

// JoinRoomMessageは実際にJoinRoomRequestをリクエストしたプレイヤー以外に送信されるメッセージです。
message JoinRoomMessage {
  // playerは入室してきたプレイヤーです。
  Player player = 1;
}

message NotifyReceivingRequest {
  // player_idは受信したプレイヤーIDです。
  int64 player_id = 1;

  // tokenはクライアントがどのルームの誰なのかを表します。
  // ルームを入室したときに生成されたtokenをセットしてください。
  string token = 2;
}

// NotifyReceivingMessageはNotifyReceivingRequestリクエストされたときに、すべてのプレイヤーに送信されるメッセージです。
message NotifyReceivingMessage {
  // playerはダメージを受けたプレイヤーです。
  Player player = 1;

  // killerNameはダメージを受けたプレイヤーを殺したプレイヤーの名前です。
  // ダメージを受けたプレイヤーが死亡していない場合、このフィールドは空文字となります。
  string killerName = 2;
}

message SurvivalResultMessage {
  Player winner = 1;
  repeated SurvivalPersonalResult personals = 2;
}

message SurvivalPersonalResult {
  string player_name = 1;
  int64 kill_count = 2;
}

message StartGameRequest {
  // tokenから得られるプレイヤーIDがルームのオーナーIDと一致しない場合、
  // このリクエストは失敗します。
  string token = 1;
}

message StartGameMessage { Room room = 1; }

message UpdateWeaponRequest {
  int64 attack = 1;
  string token = 2;
}

message UpdateWeaponResponse {}

message ReadyRequest {
  string token = 1;
}

message ReadyMessage {
  // player_idは準備完了したプレイヤーのIDです。
  int64 player_id = 1;
}

message RecoverHPRequest {
  // hp は回復量を示します。
  int64 hp = 1;
  string token = 2;
}

message RecoverHPResponse {
  Player player = 1;
}

message Error {
  int32 code = 1;
  string message = 2;
}

message CheckHealthRequest {
  string name = 1;
}

message CheckHealthResponse {
  string message = 1;
}

message GetStaminaRequest {}

message UseStaminaRequest {}

message UseStaminaResponse {
  Stamina stamina = 1;
}

message RecoverStaminaRequest {
  // count は回復したいスタミナの個数を表します。
  int64 count = 1;
}

message RecoverStaminaResponse {
  Stamina stamina = 1;
}

message Room {
  // output only
  // idはルーム番号にも利用されます。
  int64 id = 1;

  // output only
  GameRule game_rule = 2;

  // output only
  repeated Player players = 3;

  // output only
  bool game_start = 4;

  // output only
  // owner_idはルームオーナーとなるプレイヤーのIDです。
  // 値が0の場合、オーナーが存在しないことを意味します。
  int64 owner_id = 5;
}

enum GameRule {
  UNSET = 0;
  SURVIVAL = 1;
}

message Player {
  // output only
  // idは赤外線信号にも利用されます。
  int64 id = 1;

  // nameはUserのnameと同じです。
  string name = 2;

  // output only
  int64 hp = 3;

  // output only
  // readyはゲームを行うための準備ができたかどうかを表します。
  // ルーム内のすべてのプレイヤーのreadyがtrueになったとき、
  // ゲームを開始することができます。
  bool ready = 4;
}

message Stamina {
  // output only
  int64 count = 1;

  // output only
  int64 max_count = 2;

  // output only
  // recovery_time は「この時間になれば回復する」という時間unix時間を表します。
  // recovery_time 以降に Stamina リソースを取得すると自動的に回復します。
  // ただし count == 0 の状態でスタミナを取得しても自動的には回復しません（代わりにエラーが返されます）。
  // また count == max_count の場合、recovery_time は 0 になります。
  int64 recovery_time = 3;
}

// THESE WILL BE USED:
// message Inventory {
//   repeated Item items = 1;
// }

// message User {
//   string name = 1;
//   repeated Stamina staminas = 2;
//   repeated Item items = 3;
// }

// message Stamina {
//   int64 idx = 1;
//   bool valid = 2;
//   int64 last_use_time = 3;
// }

// enum Item {
//   UNKNOWN_ITEM = 0;
//   MEDICAL_KIT = 1;
// }
