syntax = "proto3";

package bolg;

option go_package = "github.com/bolg-developers/x/projects/bolg/server/pb;pb";
option java_multiple_files = true;
option java_outer_classname = "BolgProto";
option java_package = "org.bolg_developers.bolg";
import "google/protobuf/timestamp.proto";

service BolgService {
  rpc CreateAndJoinRoom(stream RoomMessage) returns (stream RoomMessage) {}
}

message RoomMessage {
  oneof data {
    CreateAndJoinRoomRequest create_and_join_room_req = 1;
    CreateAndJoinRoomResponse create_and_join_room_resp = 2;
  }
}

message CreateAndJoinRoomRequest {
  // 注意！: このフィールドは認証処理が実装され次第消えます。
  string player_name = 1;
}

message CreateAndJoinRoomResponse {
  Room room = 1;
}

message Room {
  // output only
  // idはルーム番号にも利用されます。
  int64 id = 1;

  // output only
  GameRule game_rule = 2;

  // output only
  repeated Player players = 3;

  // output only
  bool game_start = 4;

  // output only
  // owner_idはルームオーナーとなるプレイヤーのIDです。
  // 値が0の場合、オーナーが存在しないことを意味します。
  int64 owner_id = 5;
}

enum GameRule {
  UNSET = 0;
  SURVIVAL = 1;
}

message Player {
  // output only
  // idは赤外線信号にも利用されます。
  int64 id = 1;

  // nameはUserのnameと同じです。
  string name = 2;

  // output only
  int64 hp = 3;

  // output only
  // readyはゲームを行うための準備ができたかどうかを表します。
  // ルーム内のすべてのプレイヤーのreadyがtrueになったとき、
  // ゲームを開始することができます。
  bool ready = 4;
}

// THESE WILL BE USED:
// message Inventory {
//   repeated Item items = 1;
// }

// message GameResult {
//   repeated Player winners = 1;
//   repeated PersonalResult personal_results = 2;
// }

// message PersonalResult {
//   string player_name = 1;
//   int64 kill_count = 2;
//   int64 death_count = 3;
// }

// message User {
//   string name = 1;
//   repeated Stamina staminas = 2;
//   repeated Item items = 3;
// }

// message Stamina {
//   int64 idx = 1;
//   bool valid = 2;
//   google.protobuf.Timestamp use_time = 3;
// }

// enum Item {
//   UNKNOWN_ITEM = 0;
//   MEDICAL_KIT = 1;
// }
